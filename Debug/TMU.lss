
TMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d5e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000022  00800060  00800060  00000dd2  2**0
                  ALLOC
  2 .stab         00000f30  00000000  00000000  00000dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000007d0  00000000  00000000  00001d04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <__vector_10>
  2c:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 38       	cpi	r26, 0x82	; 130
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6f 05 	call	0xade	; 0xade <main>
  74:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_enuInit>:
#include "DIO_config.h"
#include "DIO_priv.h"


ES_t DIO_enuInit(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	0f 92       	push	r0
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	89 83       	std	Y+1, r24	; 0x01

	//

	return Local_enuErrorState ;
  8a:	89 81       	ldd	r24, Y+1	; 0x01
}
  8c:	0f 90       	pop	r0
  8e:	cf 91       	pop	r28
  90:	df 91       	pop	r29
  92:	08 95       	ret

00000094 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Direction)
{
  94:	df 93       	push	r29
  96:	cf 93       	push	r28
  98:	00 d0       	rcall	.+0      	; 0x9a <DIO_enuSetPinDirection+0x6>
  9a:	00 d0       	rcall	.+0      	; 0x9c <DIO_enuSetPinDirection+0x8>
  9c:	00 d0       	rcall	.+0      	; 0x9e <DIO_enuSetPinDirection+0xa>
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	8a 83       	std	Y+2, r24	; 0x02
  a4:	6b 83       	std	Y+3, r22	; 0x03
  a6:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
  ac:	8a 81       	ldd	r24, Y+2	; 0x02
  ae:	84 30       	cpi	r24, 0x04	; 4
  b0:	08 f0       	brcs	.+2      	; 0xb4 <DIO_enuSetPinDirection+0x20>
  b2:	d0 c0       	rjmp	.+416    	; 0x254 <DIO_enuSetPinDirection+0x1c0>
  b4:	8b 81       	ldd	r24, Y+3	; 0x03
  b6:	88 30       	cpi	r24, 0x08	; 8
  b8:	08 f0       	brcs	.+2      	; 0xbc <DIO_enuSetPinDirection+0x28>
  ba:	cc c0       	rjmp	.+408    	; 0x254 <DIO_enuSetPinDirection+0x1c0>
  bc:	8c 81       	ldd	r24, Y+4	; 0x04
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	08 f0       	brcs	.+2      	; 0xc4 <DIO_enuSetPinDirection+0x30>
  c2:	c8 c0       	rjmp	.+400    	; 0x254 <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_u8PIN7 &&
			Copy_u8Direction <= DIO_u8OUTPUT )
	{
		switch (Copy_u8GroupID)
  c4:	8a 81       	ldd	r24, Y+2	; 0x02
  c6:	28 2f       	mov	r18, r24
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	3e 83       	std	Y+6, r19	; 0x06
  cc:	2d 83       	std	Y+5, r18	; 0x05
  ce:	6d 81       	ldd	r22, Y+5	; 0x05
  d0:	7e 81       	ldd	r23, Y+6	; 0x06
  d2:	61 30       	cpi	r22, 0x01	; 1
  d4:	71 05       	cpc	r23, r1
  d6:	09 f4       	brne	.+2      	; 0xda <DIO_enuSetPinDirection+0x46>
  d8:	41 c0       	rjmp	.+130    	; 0x15c <DIO_enuSetPinDirection+0xc8>
  da:	8d 81       	ldd	r24, Y+5	; 0x05
  dc:	9e 81       	ldd	r25, Y+6	; 0x06
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	91 05       	cpc	r25, r1
  e2:	34 f4       	brge	.+12     	; 0xf0 <DIO_enuSetPinDirection+0x5c>
  e4:	2d 81       	ldd	r18, Y+5	; 0x05
  e6:	3e 81       	ldd	r19, Y+6	; 0x06
  e8:	21 15       	cp	r18, r1
  ea:	31 05       	cpc	r19, r1
  ec:	71 f0       	breq	.+28     	; 0x10a <DIO_enuSetPinDirection+0x76>
  ee:	b0 c0       	rjmp	.+352    	; 0x250 <DIO_enuSetPinDirection+0x1bc>
  f0:	6d 81       	ldd	r22, Y+5	; 0x05
  f2:	7e 81       	ldd	r23, Y+6	; 0x06
  f4:	62 30       	cpi	r22, 0x02	; 2
  f6:	71 05       	cpc	r23, r1
  f8:	09 f4       	brne	.+2      	; 0xfc <DIO_enuSetPinDirection+0x68>
  fa:	59 c0       	rjmp	.+178    	; 0x1ae <DIO_enuSetPinDirection+0x11a>
  fc:	8d 81       	ldd	r24, Y+5	; 0x05
  fe:	9e 81       	ldd	r25, Y+6	; 0x06
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	91 05       	cpc	r25, r1
 104:	09 f4       	brne	.+2      	; 0x108 <DIO_enuSetPinDirection+0x74>
 106:	7c c0       	rjmp	.+248    	; 0x200 <DIO_enuSetPinDirection+0x16c>
 108:	a3 c0       	rjmp	.+326    	; 0x250 <DIO_enuSetPinDirection+0x1bc>
		{
		case DIO_u8GROUP_A:
			DDRA &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
 10a:	aa e3       	ldi	r26, 0x3A	; 58
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	ea e3       	ldi	r30, 0x3A	; 58
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	48 2f       	mov	r20, r24
 116:	8b 81       	ldd	r24, Y+3	; 0x03
 118:	28 2f       	mov	r18, r24
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_enuSetPinDirection+0x92>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	2a 95       	dec	r18
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_enuSetPinDirection+0x8e>
 12a:	80 95       	com	r24
 12c:	84 23       	and	r24, r20
 12e:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Direction <<   Copy_u8PinID );
 130:	aa e3       	ldi	r26, 0x3A	; 58
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	ea e3       	ldi	r30, 0x3A	; 58
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	48 2f       	mov	r20, r24
 13c:	8c 81       	ldd	r24, Y+4	; 0x04
 13e:	28 2f       	mov	r18, r24
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	8b 81       	ldd	r24, Y+3	; 0x03
 144:	88 2f       	mov	r24, r24
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	b9 01       	movw	r22, r18
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_enuSetPinDirection+0xbc>
 14c:	66 0f       	add	r22, r22
 14e:	77 1f       	adc	r23, r23
 150:	8a 95       	dec	r24
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_enuSetPinDirection+0xb8>
 154:	cb 01       	movw	r24, r22
 156:	84 2b       	or	r24, r20
 158:	8c 93       	st	X, r24
 15a:	7a c0       	rjmp	.+244    	; 0x250 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_B:
			DDRB &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
 15c:	a7 e3       	ldi	r26, 0x37	; 55
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	e7 e3       	ldi	r30, 0x37	; 55
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	48 2f       	mov	r20, r24
 168:	8b 81       	ldd	r24, Y+3	; 0x03
 16a:	28 2f       	mov	r18, r24
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_enuSetPinDirection+0xe4>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	2a 95       	dec	r18
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_enuSetPinDirection+0xe0>
 17c:	80 95       	com	r24
 17e:	84 23       	and	r24, r20
 180:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Direction <<   Copy_u8PinID );
 182:	a7 e3       	ldi	r26, 0x37	; 55
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	e7 e3       	ldi	r30, 0x37	; 55
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	48 2f       	mov	r20, r24
 18e:	8c 81       	ldd	r24, Y+4	; 0x04
 190:	28 2f       	mov	r18, r24
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	8b 81       	ldd	r24, Y+3	; 0x03
 196:	88 2f       	mov	r24, r24
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	b9 01       	movw	r22, r18
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_enuSetPinDirection+0x10e>
 19e:	66 0f       	add	r22, r22
 1a0:	77 1f       	adc	r23, r23
 1a2:	8a 95       	dec	r24
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_enuSetPinDirection+0x10a>
 1a6:	cb 01       	movw	r24, r22
 1a8:	84 2b       	or	r24, r20
 1aa:	8c 93       	st	X, r24
 1ac:	51 c0       	rjmp	.+162    	; 0x250 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_C:
			DDRC &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
 1ae:	a4 e3       	ldi	r26, 0x34	; 52
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
 1b2:	e4 e3       	ldi	r30, 0x34	; 52
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	48 2f       	mov	r20, r24
 1ba:	8b 81       	ldd	r24, Y+3	; 0x03
 1bc:	28 2f       	mov	r18, r24
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_enuSetPinDirection+0x136>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	2a 95       	dec	r18
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_enuSetPinDirection+0x132>
 1ce:	80 95       	com	r24
 1d0:	84 23       	and	r24, r20
 1d2:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Direction <<   Copy_u8PinID );
 1d4:	a4 e3       	ldi	r26, 0x34	; 52
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	e4 e3       	ldi	r30, 0x34	; 52
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	48 2f       	mov	r20, r24
 1e0:	8c 81       	ldd	r24, Y+4	; 0x04
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	8b 81       	ldd	r24, Y+3	; 0x03
 1e8:	88 2f       	mov	r24, r24
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	b9 01       	movw	r22, r18
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_enuSetPinDirection+0x160>
 1f0:	66 0f       	add	r22, r22
 1f2:	77 1f       	adc	r23, r23
 1f4:	8a 95       	dec	r24
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_enuSetPinDirection+0x15c>
 1f8:	cb 01       	movw	r24, r22
 1fa:	84 2b       	or	r24, r20
 1fc:	8c 93       	st	X, r24
 1fe:	28 c0       	rjmp	.+80     	; 0x250 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_D:
			DDRD &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
 200:	a1 e3       	ldi	r26, 0x31	; 49
 202:	b0 e0       	ldi	r27, 0x00	; 0
 204:	e1 e3       	ldi	r30, 0x31	; 49
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	48 2f       	mov	r20, r24
 20c:	8b 81       	ldd	r24, Y+3	; 0x03
 20e:	28 2f       	mov	r18, r24
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_enuSetPinDirection+0x188>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	2a 95       	dec	r18
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_enuSetPinDirection+0x184>
 220:	80 95       	com	r24
 222:	84 23       	and	r24, r20
 224:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Direction <<   Copy_u8PinID );
 226:	a1 e3       	ldi	r26, 0x31	; 49
 228:	b0 e0       	ldi	r27, 0x00	; 0
 22a:	e1 e3       	ldi	r30, 0x31	; 49
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	48 2f       	mov	r20, r24
 232:	8c 81       	ldd	r24, Y+4	; 0x04
 234:	28 2f       	mov	r18, r24
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	8b 81       	ldd	r24, Y+3	; 0x03
 23a:	88 2f       	mov	r24, r24
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	b9 01       	movw	r22, r18
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_enuSetPinDirection+0x1b2>
 242:	66 0f       	add	r22, r22
 244:	77 1f       	adc	r23, r23
 246:	8a 95       	dec	r24
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_enuSetPinDirection+0x1ae>
 24a:	cb 01       	movw	r24, r22
 24c:	84 2b       	or	r24, r20
 24e:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
 250:	19 82       	std	Y+1, r1	; 0x01
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
 258:	89 81       	ldd	r24, Y+1	; 0x01
}
 25a:	26 96       	adiw	r28, 0x06	; 6
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	f8 94       	cli
 260:	de bf       	out	0x3e, r29	; 62
 262:	0f be       	out	0x3f, r0	; 63
 264:	cd bf       	out	0x3d, r28	; 61
 266:	cf 91       	pop	r28
 268:	df 91       	pop	r29
 26a:	08 95       	ret

0000026c <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
 26c:	df 93       	push	r29
 26e:	cf 93       	push	r28
 270:	00 d0       	rcall	.+0      	; 0x272 <DIO_enuSetPinValue+0x6>
 272:	00 d0       	rcall	.+0      	; 0x274 <DIO_enuSetPinValue+0x8>
 274:	00 d0       	rcall	.+0      	; 0x276 <DIO_enuSetPinValue+0xa>
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
 27a:	8a 83       	std	Y+2, r24	; 0x02
 27c:	6b 83       	std	Y+3, r22	; 0x03
 27e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
 284:	8a 81       	ldd	r24, Y+2	; 0x02
 286:	84 30       	cpi	r24, 0x04	; 4
 288:	08 f0       	brcs	.+2      	; 0x28c <DIO_enuSetPinValue+0x20>
 28a:	d3 c0       	rjmp	.+422    	; 0x432 <DIO_enuSetPinValue+0x1c6>
 28c:	8b 81       	ldd	r24, Y+3	; 0x03
 28e:	88 30       	cpi	r24, 0x08	; 8
 290:	08 f0       	brcs	.+2      	; 0x294 <DIO_enuSetPinValue+0x28>
 292:	cf c0       	rjmp	.+414    	; 0x432 <DIO_enuSetPinValue+0x1c6>
 294:	8c 81       	ldd	r24, Y+4	; 0x04
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	20 f0       	brcs	.+8      	; 0x2a2 <DIO_enuSetPinValue+0x36>
 29a:	8c 81       	ldd	r24, Y+4	; 0x04
 29c:	82 30       	cpi	r24, 0x02	; 2
 29e:	08 f0       	brcs	.+2      	; 0x2a2 <DIO_enuSetPinValue+0x36>
 2a0:	c8 c0       	rjmp	.+400    	; 0x432 <DIO_enuSetPinValue+0x1c6>
			Copy_u8PinID <= DIO_u8PIN7 &&
			(Copy_u8Value <= DIO_u8HIGH || Copy_u8Value <= DIO_u8PULL_UP ) )
	{
		switch (Copy_u8GroupID)
 2a2:	8a 81       	ldd	r24, Y+2	; 0x02
 2a4:	28 2f       	mov	r18, r24
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	3e 83       	std	Y+6, r19	; 0x06
 2aa:	2d 83       	std	Y+5, r18	; 0x05
 2ac:	6d 81       	ldd	r22, Y+5	; 0x05
 2ae:	7e 81       	ldd	r23, Y+6	; 0x06
 2b0:	61 30       	cpi	r22, 0x01	; 1
 2b2:	71 05       	cpc	r23, r1
 2b4:	09 f4       	brne	.+2      	; 0x2b8 <DIO_enuSetPinValue+0x4c>
 2b6:	41 c0       	rjmp	.+130    	; 0x33a <DIO_enuSetPinValue+0xce>
 2b8:	8d 81       	ldd	r24, Y+5	; 0x05
 2ba:	9e 81       	ldd	r25, Y+6	; 0x06
 2bc:	82 30       	cpi	r24, 0x02	; 2
 2be:	91 05       	cpc	r25, r1
 2c0:	34 f4       	brge	.+12     	; 0x2ce <DIO_enuSetPinValue+0x62>
 2c2:	2d 81       	ldd	r18, Y+5	; 0x05
 2c4:	3e 81       	ldd	r19, Y+6	; 0x06
 2c6:	21 15       	cp	r18, r1
 2c8:	31 05       	cpc	r19, r1
 2ca:	71 f0       	breq	.+28     	; 0x2e8 <DIO_enuSetPinValue+0x7c>
 2cc:	b0 c0       	rjmp	.+352    	; 0x42e <DIO_enuSetPinValue+0x1c2>
 2ce:	6d 81       	ldd	r22, Y+5	; 0x05
 2d0:	7e 81       	ldd	r23, Y+6	; 0x06
 2d2:	62 30       	cpi	r22, 0x02	; 2
 2d4:	71 05       	cpc	r23, r1
 2d6:	09 f4       	brne	.+2      	; 0x2da <DIO_enuSetPinValue+0x6e>
 2d8:	59 c0       	rjmp	.+178    	; 0x38c <DIO_enuSetPinValue+0x120>
 2da:	8d 81       	ldd	r24, Y+5	; 0x05
 2dc:	9e 81       	ldd	r25, Y+6	; 0x06
 2de:	83 30       	cpi	r24, 0x03	; 3
 2e0:	91 05       	cpc	r25, r1
 2e2:	09 f4       	brne	.+2      	; 0x2e6 <DIO_enuSetPinValue+0x7a>
 2e4:	7c c0       	rjmp	.+248    	; 0x3de <DIO_enuSetPinValue+0x172>
 2e6:	a3 c0       	rjmp	.+326    	; 0x42e <DIO_enuSetPinValue+0x1c2>
		{
		case DIO_u8GROUP_A:
			PORTA &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
 2e8:	ab e3       	ldi	r26, 0x3B	; 59
 2ea:	b0 e0       	ldi	r27, 0x00	; 0
 2ec:	eb e3       	ldi	r30, 0x3B	; 59
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	48 2f       	mov	r20, r24
 2f4:	8b 81       	ldd	r24, Y+3	; 0x03
 2f6:	28 2f       	mov	r18, r24
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_enuSetPinValue+0x98>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	2a 95       	dec	r18
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_enuSetPinValue+0x94>
 308:	80 95       	com	r24
 30a:	84 23       	and	r24, r20
 30c:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value <<   Copy_u8PinID );
 30e:	ab e3       	ldi	r26, 0x3B	; 59
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	eb e3       	ldi	r30, 0x3B	; 59
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	48 2f       	mov	r20, r24
 31a:	8c 81       	ldd	r24, Y+4	; 0x04
 31c:	28 2f       	mov	r18, r24
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	8b 81       	ldd	r24, Y+3	; 0x03
 322:	88 2f       	mov	r24, r24
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	b9 01       	movw	r22, r18
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_enuSetPinValue+0xc2>
 32a:	66 0f       	add	r22, r22
 32c:	77 1f       	adc	r23, r23
 32e:	8a 95       	dec	r24
 330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_enuSetPinValue+0xbe>
 332:	cb 01       	movw	r24, r22
 334:	84 2b       	or	r24, r20
 336:	8c 93       	st	X, r24
 338:	7a c0       	rjmp	.+244    	; 0x42e <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_B:
			PORTB &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
 33a:	a8 e3       	ldi	r26, 0x38	; 56
 33c:	b0 e0       	ldi	r27, 0x00	; 0
 33e:	e8 e3       	ldi	r30, 0x38	; 56
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	48 2f       	mov	r20, r24
 346:	8b 81       	ldd	r24, Y+3	; 0x03
 348:	28 2f       	mov	r18, r24
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_enuSetPinValue+0xea>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	2a 95       	dec	r18
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_enuSetPinValue+0xe6>
 35a:	80 95       	com	r24
 35c:	84 23       	and	r24, r20
 35e:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value <<   Copy_u8PinID );
 360:	a8 e3       	ldi	r26, 0x38	; 56
 362:	b0 e0       	ldi	r27, 0x00	; 0
 364:	e8 e3       	ldi	r30, 0x38	; 56
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	48 2f       	mov	r20, r24
 36c:	8c 81       	ldd	r24, Y+4	; 0x04
 36e:	28 2f       	mov	r18, r24
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	8b 81       	ldd	r24, Y+3	; 0x03
 374:	88 2f       	mov	r24, r24
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	b9 01       	movw	r22, r18
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_enuSetPinValue+0x114>
 37c:	66 0f       	add	r22, r22
 37e:	77 1f       	adc	r23, r23
 380:	8a 95       	dec	r24
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_enuSetPinValue+0x110>
 384:	cb 01       	movw	r24, r22
 386:	84 2b       	or	r24, r20
 388:	8c 93       	st	X, r24
 38a:	51 c0       	rjmp	.+162    	; 0x42e <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_C:
			PORTC &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
 38c:	a5 e3       	ldi	r26, 0x35	; 53
 38e:	b0 e0       	ldi	r27, 0x00	; 0
 390:	e5 e3       	ldi	r30, 0x35	; 53
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	48 2f       	mov	r20, r24
 398:	8b 81       	ldd	r24, Y+3	; 0x03
 39a:	28 2f       	mov	r18, r24
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_enuSetPinValue+0x13c>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	2a 95       	dec	r18
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_enuSetPinValue+0x138>
 3ac:	80 95       	com	r24
 3ae:	84 23       	and	r24, r20
 3b0:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value <<   Copy_u8PinID );
 3b2:	a5 e3       	ldi	r26, 0x35	; 53
 3b4:	b0 e0       	ldi	r27, 0x00	; 0
 3b6:	e5 e3       	ldi	r30, 0x35	; 53
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	48 2f       	mov	r20, r24
 3be:	8c 81       	ldd	r24, Y+4	; 0x04
 3c0:	28 2f       	mov	r18, r24
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	8b 81       	ldd	r24, Y+3	; 0x03
 3c6:	88 2f       	mov	r24, r24
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	b9 01       	movw	r22, r18
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_enuSetPinValue+0x166>
 3ce:	66 0f       	add	r22, r22
 3d0:	77 1f       	adc	r23, r23
 3d2:	8a 95       	dec	r24
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_enuSetPinValue+0x162>
 3d6:	cb 01       	movw	r24, r22
 3d8:	84 2b       	or	r24, r20
 3da:	8c 93       	st	X, r24
 3dc:	28 c0       	rjmp	.+80     	; 0x42e <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_D:
			PORTD &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
 3de:	a2 e3       	ldi	r26, 0x32	; 50
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
 3e2:	e2 e3       	ldi	r30, 0x32	; 50
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	48 2f       	mov	r20, r24
 3ea:	8b 81       	ldd	r24, Y+3	; 0x03
 3ec:	28 2f       	mov	r18, r24
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_enuSetPinValue+0x18e>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	2a 95       	dec	r18
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_enuSetPinValue+0x18a>
 3fe:	80 95       	com	r24
 400:	84 23       	and	r24, r20
 402:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value <<   Copy_u8PinID );
 404:	a2 e3       	ldi	r26, 0x32	; 50
 406:	b0 e0       	ldi	r27, 0x00	; 0
 408:	e2 e3       	ldi	r30, 0x32	; 50
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	48 2f       	mov	r20, r24
 410:	8c 81       	ldd	r24, Y+4	; 0x04
 412:	28 2f       	mov	r18, r24
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	8b 81       	ldd	r24, Y+3	; 0x03
 418:	88 2f       	mov	r24, r24
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	b9 01       	movw	r22, r18
 41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_enuSetPinValue+0x1b8>
 420:	66 0f       	add	r22, r22
 422:	77 1f       	adc	r23, r23
 424:	8a 95       	dec	r24
 426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_enuSetPinValue+0x1b4>
 428:	cb 01       	movw	r24, r22
 42a:	84 2b       	or	r24, r20
 42c:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
 42e:	19 82       	std	Y+1, r1	; 0x01
 430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_enuSetPinValue+0x1ca>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
 432:	82 e0       	ldi	r24, 0x02	; 2
 434:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
 436:	89 81       	ldd	r24, Y+1	; 0x01
}
 438:	26 96       	adiw	r28, 0x06	; 6
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	f8 94       	cli
 43e:	de bf       	out	0x3e, r29	; 62
 440:	0f be       	out	0x3f, r0	; 63
 442:	cd bf       	out	0x3d, r28	; 61
 444:	cf 91       	pop	r28
 446:	df 91       	pop	r29
 448:	08 95       	ret

0000044a <DIO_enuTogglePinValue>:


ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID)
{
 44a:	df 93       	push	r29
 44c:	cf 93       	push	r28
 44e:	00 d0       	rcall	.+0      	; 0x450 <DIO_enuTogglePinValue+0x6>
 450:	00 d0       	rcall	.+0      	; 0x452 <DIO_enuTogglePinValue+0x8>
 452:	0f 92       	push	r0
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
 458:	8a 83       	std	Y+2, r24	; 0x02
 45a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
 460:	8a 81       	ldd	r24, Y+2	; 0x02
 462:	84 30       	cpi	r24, 0x04	; 4
 464:	08 f0       	brcs	.+2      	; 0x468 <DIO_enuTogglePinValue+0x1e>
 466:	74 c0       	rjmp	.+232    	; 0x550 <DIO_enuTogglePinValue+0x106>
 468:	8b 81       	ldd	r24, Y+3	; 0x03
 46a:	88 30       	cpi	r24, 0x08	; 8
 46c:	08 f0       	brcs	.+2      	; 0x470 <DIO_enuTogglePinValue+0x26>
 46e:	70 c0       	rjmp	.+224    	; 0x550 <DIO_enuTogglePinValue+0x106>
			Copy_u8PinID <= DIO_u8PIN7)
	{
		switch (Copy_u8GroupID)
 470:	8a 81       	ldd	r24, Y+2	; 0x02
 472:	28 2f       	mov	r18, r24
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	3d 83       	std	Y+5, r19	; 0x05
 478:	2c 83       	std	Y+4, r18	; 0x04
 47a:	8c 81       	ldd	r24, Y+4	; 0x04
 47c:	9d 81       	ldd	r25, Y+5	; 0x05
 47e:	81 30       	cpi	r24, 0x01	; 1
 480:	91 05       	cpc	r25, r1
 482:	49 f1       	breq	.+82     	; 0x4d6 <DIO_enuTogglePinValue+0x8c>
 484:	2c 81       	ldd	r18, Y+4	; 0x04
 486:	3d 81       	ldd	r19, Y+5	; 0x05
 488:	22 30       	cpi	r18, 0x02	; 2
 48a:	31 05       	cpc	r19, r1
 48c:	2c f4       	brge	.+10     	; 0x498 <DIO_enuTogglePinValue+0x4e>
 48e:	8c 81       	ldd	r24, Y+4	; 0x04
 490:	9d 81       	ldd	r25, Y+5	; 0x05
 492:	00 97       	sbiw	r24, 0x00	; 0
 494:	61 f0       	breq	.+24     	; 0x4ae <DIO_enuTogglePinValue+0x64>
 496:	5a c0       	rjmp	.+180    	; 0x54c <DIO_enuTogglePinValue+0x102>
 498:	2c 81       	ldd	r18, Y+4	; 0x04
 49a:	3d 81       	ldd	r19, Y+5	; 0x05
 49c:	22 30       	cpi	r18, 0x02	; 2
 49e:	31 05       	cpc	r19, r1
 4a0:	71 f1       	breq	.+92     	; 0x4fe <DIO_enuTogglePinValue+0xb4>
 4a2:	8c 81       	ldd	r24, Y+4	; 0x04
 4a4:	9d 81       	ldd	r25, Y+5	; 0x05
 4a6:	83 30       	cpi	r24, 0x03	; 3
 4a8:	91 05       	cpc	r25, r1
 4aa:	e9 f1       	breq	.+122    	; 0x526 <DIO_enuTogglePinValue+0xdc>
 4ac:	4f c0       	rjmp	.+158    	; 0x54c <DIO_enuTogglePinValue+0x102>
		{
		case DIO_u8GROUP_A:
			PORTA ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
 4ae:	ab e3       	ldi	r26, 0x3B	; 59
 4b0:	b0 e0       	ldi	r27, 0x00	; 0
 4b2:	eb e3       	ldi	r30, 0x3B	; 59
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	80 81       	ld	r24, Z
 4b8:	48 2f       	mov	r20, r24
 4ba:	8b 81       	ldd	r24, Y+3	; 0x03
 4bc:	28 2f       	mov	r18, r24
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	02 2e       	mov	r0, r18
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <DIO_enuTogglePinValue+0x82>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	0a 94       	dec	r0
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <DIO_enuTogglePinValue+0x7e>
 4d0:	84 27       	eor	r24, r20
 4d2:	8c 93       	st	X, r24
 4d4:	3b c0       	rjmp	.+118    	; 0x54c <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_B:
			PORTB ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
 4d6:	a8 e3       	ldi	r26, 0x38	; 56
 4d8:	b0 e0       	ldi	r27, 0x00	; 0
 4da:	e8 e3       	ldi	r30, 0x38	; 56
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	80 81       	ld	r24, Z
 4e0:	48 2f       	mov	r20, r24
 4e2:	8b 81       	ldd	r24, Y+3	; 0x03
 4e4:	28 2f       	mov	r18, r24
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	02 2e       	mov	r0, r18
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <DIO_enuTogglePinValue+0xaa>
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	0a 94       	dec	r0
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <DIO_enuTogglePinValue+0xa6>
 4f8:	84 27       	eor	r24, r20
 4fa:	8c 93       	st	X, r24
 4fc:	27 c0       	rjmp	.+78     	; 0x54c <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_C:
			PORTC ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
 4fe:	a5 e3       	ldi	r26, 0x35	; 53
 500:	b0 e0       	ldi	r27, 0x00	; 0
 502:	e5 e3       	ldi	r30, 0x35	; 53
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	80 81       	ld	r24, Z
 508:	48 2f       	mov	r20, r24
 50a:	8b 81       	ldd	r24, Y+3	; 0x03
 50c:	28 2f       	mov	r18, r24
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	02 2e       	mov	r0, r18
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_enuTogglePinValue+0xd2>
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	0a 94       	dec	r0
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_enuTogglePinValue+0xce>
 520:	84 27       	eor	r24, r20
 522:	8c 93       	st	X, r24
 524:	13 c0       	rjmp	.+38     	; 0x54c <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_D:
			PORTD ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
 526:	a2 e3       	ldi	r26, 0x32	; 50
 528:	b0 e0       	ldi	r27, 0x00	; 0
 52a:	e2 e3       	ldi	r30, 0x32	; 50
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	48 2f       	mov	r20, r24
 532:	8b 81       	ldd	r24, Y+3	; 0x03
 534:	28 2f       	mov	r18, r24
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	02 2e       	mov	r0, r18
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_enuTogglePinValue+0xfa>
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	0a 94       	dec	r0
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_enuTogglePinValue+0xf6>
 548:	84 27       	eor	r24, r20
 54a:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
 54c:	19 82       	std	Y+1, r1	; 0x01
 54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_enuTogglePinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
 550:	82 e0       	ldi	r24, 0x02	; 2
 552:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
 554:	89 81       	ldd	r24, Y+1	; 0x01
}
 556:	0f 90       	pop	r0
 558:	0f 90       	pop	r0
 55a:	0f 90       	pop	r0
 55c:	0f 90       	pop	r0
 55e:	0f 90       	pop	r0
 560:	cf 91       	pop	r28
 562:	df 91       	pop	r29
 564:	08 95       	ret

00000566 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
 566:	df 93       	push	r29
 568:	cf 93       	push	r28
 56a:	cd b7       	in	r28, 0x3d	; 61
 56c:	de b7       	in	r29, 0x3e	; 62
 56e:	27 97       	sbiw	r28, 0x07	; 7
 570:	0f b6       	in	r0, 0x3f	; 63
 572:	f8 94       	cli
 574:	de bf       	out	0x3e, r29	; 62
 576:	0f be       	out	0x3f, r0	; 63
 578:	cd bf       	out	0x3d, r28	; 61
 57a:	8a 83       	std	Y+2, r24	; 0x02
 57c:	6b 83       	std	Y+3, r22	; 0x03
 57e:	5d 83       	std	Y+5, r21	; 0x05
 580:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pu8Value != NULL)
 586:	8c 81       	ldd	r24, Y+4	; 0x04
 588:	9d 81       	ldd	r25, Y+5	; 0x05
 58a:	00 97       	sbiw	r24, 0x00	; 0
 58c:	09 f4       	brne	.+2      	; 0x590 <DIO_enuGetPinValue+0x2a>
 58e:	7d c0       	rjmp	.+250    	; 0x68a <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8GroupID <= DIO_u8GROUP_D &&
 590:	8a 81       	ldd	r24, Y+2	; 0x02
 592:	84 30       	cpi	r24, 0x04	; 4
 594:	08 f0       	brcs	.+2      	; 0x598 <DIO_enuGetPinValue+0x32>
 596:	76 c0       	rjmp	.+236    	; 0x684 <DIO_enuGetPinValue+0x11e>
 598:	8b 81       	ldd	r24, Y+3	; 0x03
 59a:	88 30       	cpi	r24, 0x08	; 8
 59c:	08 f0       	brcs	.+2      	; 0x5a0 <DIO_enuGetPinValue+0x3a>
 59e:	72 c0       	rjmp	.+228    	; 0x684 <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8GroupID)
 5a0:	8a 81       	ldd	r24, Y+2	; 0x02
 5a2:	28 2f       	mov	r18, r24
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	3f 83       	std	Y+7, r19	; 0x07
 5a8:	2e 83       	std	Y+6, r18	; 0x06
 5aa:	4e 81       	ldd	r20, Y+6	; 0x06
 5ac:	5f 81       	ldd	r21, Y+7	; 0x07
 5ae:	41 30       	cpi	r20, 0x01	; 1
 5b0:	51 05       	cpc	r21, r1
 5b2:	59 f1       	breq	.+86     	; 0x60a <DIO_enuGetPinValue+0xa4>
 5b4:	8e 81       	ldd	r24, Y+6	; 0x06
 5b6:	9f 81       	ldd	r25, Y+7	; 0x07
 5b8:	82 30       	cpi	r24, 0x02	; 2
 5ba:	91 05       	cpc	r25, r1
 5bc:	34 f4       	brge	.+12     	; 0x5ca <DIO_enuGetPinValue+0x64>
 5be:	2e 81       	ldd	r18, Y+6	; 0x06
 5c0:	3f 81       	ldd	r19, Y+7	; 0x07
 5c2:	21 15       	cp	r18, r1
 5c4:	31 05       	cpc	r19, r1
 5c6:	69 f0       	breq	.+26     	; 0x5e2 <DIO_enuGetPinValue+0x7c>
 5c8:	5b c0       	rjmp	.+182    	; 0x680 <DIO_enuGetPinValue+0x11a>
 5ca:	4e 81       	ldd	r20, Y+6	; 0x06
 5cc:	5f 81       	ldd	r21, Y+7	; 0x07
 5ce:	42 30       	cpi	r20, 0x02	; 2
 5d0:	51 05       	cpc	r21, r1
 5d2:	79 f1       	breq	.+94     	; 0x632 <DIO_enuGetPinValue+0xcc>
 5d4:	8e 81       	ldd	r24, Y+6	; 0x06
 5d6:	9f 81       	ldd	r25, Y+7	; 0x07
 5d8:	83 30       	cpi	r24, 0x03	; 3
 5da:	91 05       	cpc	r25, r1
 5dc:	09 f4       	brne	.+2      	; 0x5e0 <DIO_enuGetPinValue+0x7a>
 5de:	3d c0       	rjmp	.+122    	; 0x65a <DIO_enuGetPinValue+0xf4>
 5e0:	4f c0       	rjmp	.+158    	; 0x680 <DIO_enuGetPinValue+0x11a>
			{
			case DIO_u8GROUP_A:
				*Copy_pu8Value = ( ( PINA >> Copy_u8PinID ) & DIO_BIT_MASK );
 5e2:	e9 e3       	ldi	r30, 0x39	; 57
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	80 81       	ld	r24, Z
 5e8:	28 2f       	mov	r18, r24
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	8b 81       	ldd	r24, Y+3	; 0x03
 5ee:	88 2f       	mov	r24, r24
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	a9 01       	movw	r20, r18
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <DIO_enuGetPinValue+0x94>
 5f6:	55 95       	asr	r21
 5f8:	47 95       	ror	r20
 5fa:	8a 95       	dec	r24
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <DIO_enuGetPinValue+0x90>
 5fe:	ca 01       	movw	r24, r20
 600:	81 70       	andi	r24, 0x01	; 1
 602:	ec 81       	ldd	r30, Y+4	; 0x04
 604:	fd 81       	ldd	r31, Y+5	; 0x05
 606:	80 83       	st	Z, r24
 608:	3b c0       	rjmp	.+118    	; 0x680 <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_B:
				*Copy_pu8Value = ( ( PINB >> Copy_u8PinID ) & DIO_BIT_MASK );
 60a:	e6 e3       	ldi	r30, 0x36	; 54
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	80 81       	ld	r24, Z
 610:	28 2f       	mov	r18, r24
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	8b 81       	ldd	r24, Y+3	; 0x03
 616:	88 2f       	mov	r24, r24
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	a9 01       	movw	r20, r18
 61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_enuGetPinValue+0xbc>
 61e:	55 95       	asr	r21
 620:	47 95       	ror	r20
 622:	8a 95       	dec	r24
 624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_enuGetPinValue+0xb8>
 626:	ca 01       	movw	r24, r20
 628:	81 70       	andi	r24, 0x01	; 1
 62a:	ec 81       	ldd	r30, Y+4	; 0x04
 62c:	fd 81       	ldd	r31, Y+5	; 0x05
 62e:	80 83       	st	Z, r24
 630:	27 c0       	rjmp	.+78     	; 0x680 <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_C:
				*Copy_pu8Value = ( ( PINC >> Copy_u8PinID ) & DIO_BIT_MASK );
 632:	e3 e3       	ldi	r30, 0x33	; 51
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	80 81       	ld	r24, Z
 638:	28 2f       	mov	r18, r24
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	8b 81       	ldd	r24, Y+3	; 0x03
 63e:	88 2f       	mov	r24, r24
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	a9 01       	movw	r20, r18
 644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_enuGetPinValue+0xe4>
 646:	55 95       	asr	r21
 648:	47 95       	ror	r20
 64a:	8a 95       	dec	r24
 64c:	e2 f7       	brpl	.-8      	; 0x646 <DIO_enuGetPinValue+0xe0>
 64e:	ca 01       	movw	r24, r20
 650:	81 70       	andi	r24, 0x01	; 1
 652:	ec 81       	ldd	r30, Y+4	; 0x04
 654:	fd 81       	ldd	r31, Y+5	; 0x05
 656:	80 83       	st	Z, r24
 658:	13 c0       	rjmp	.+38     	; 0x680 <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_D:
				*Copy_pu8Value = ( ( PIND >> Copy_u8PinID ) & DIO_BIT_MASK );
 65a:	e0 e3       	ldi	r30, 0x30	; 48
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	80 81       	ld	r24, Z
 660:	28 2f       	mov	r18, r24
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	8b 81       	ldd	r24, Y+3	; 0x03
 666:	88 2f       	mov	r24, r24
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	a9 01       	movw	r20, r18
 66c:	02 c0       	rjmp	.+4      	; 0x672 <DIO_enuGetPinValue+0x10c>
 66e:	55 95       	asr	r21
 670:	47 95       	ror	r20
 672:	8a 95       	dec	r24
 674:	e2 f7       	brpl	.-8      	; 0x66e <DIO_enuGetPinValue+0x108>
 676:	ca 01       	movw	r24, r20
 678:	81 70       	andi	r24, 0x01	; 1
 67a:	ec 81       	ldd	r30, Y+4	; 0x04
 67c:	fd 81       	ldd	r31, Y+5	; 0x05
 67e:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
 680:	19 82       	std	Y+1, r1	; 0x01
 682:	05 c0       	rjmp	.+10     	; 0x68e <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_RANGE;
 684:	82 e0       	ldi	r24, 0x02	; 2
 686:	89 83       	std	Y+1, r24	; 0x01
 688:	02 c0       	rjmp	.+4      	; 0x68e <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 68a:	83 e0       	ldi	r24, 0x03	; 3
 68c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
 68e:	89 81       	ldd	r24, Y+1	; 0x01
}
 690:	27 96       	adiw	r28, 0x07	; 7
 692:	0f b6       	in	r0, 0x3f	; 63
 694:	f8 94       	cli
 696:	de bf       	out	0x3e, r29	; 62
 698:	0f be       	out	0x3f, r0	; 63
 69a:	cd bf       	out	0x3d, r28	; 61
 69c:	cf 91       	pop	r28
 69e:	df 91       	pop	r29
 6a0:	08 95       	ret

000006a2 <TMU_vidInit>:

static TCB_t All_Tasks[MAX_TASKS];
static u32 TMU_u32OsTicks;

void TMU_vidInit(void)
{
 6a2:	df 93       	push	r29
 6a4:	cf 93       	push	r28
 6a6:	cd b7       	in	r28, 0x3d	; 61
 6a8:	de b7       	in	r29, 0x3e	; 62
#if TIMER_CHANNEL == TIMER0
	TCCR0 = 0x0D;
 6aa:	e3 e5       	ldi	r30, 0x53	; 83
 6ac:	f0 e0       	ldi	r31, 0x00	; 0
 6ae:	8d e0       	ldi	r24, 0x0D	; 13
 6b0:	80 83       	st	Z, r24
	#if OS_TICK >0 && OS_TICK <= 16
		OCR0 = (u8)((OS_TICK * CPU_FREQ)/1024ul);
 6b2:	ec e5       	ldi	r30, 0x5C	; 92
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	8c e9       	ldi	r24, 0x9C	; 156
 6b8:	80 83       	st	Z, r24

		TMU_u8ISRNum = 1;
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	80 93 60 00 	sts	0x0060, r24
		TMU_u8ISRCount = 1;
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	80 93 61 00 	sts	0x0061, r24
		TIMSK |= (1<<1);
 6c6:	a9 e5       	ldi	r26, 0x59	; 89
 6c8:	b0 e0       	ldi	r27, 0x00	; 0
 6ca:	e9 e5       	ldi	r30, 0x59	; 89
 6cc:	f0 e0       	ldi	r31, 0x00	; 0
 6ce:	80 81       	ld	r24, Z
 6d0:	82 60       	ori	r24, 0x02	; 2
 6d2:	8c 93       	st	X, r24
	#error os tick value is invalid
	#endif
#else
#error Timer channel configuration is invalid
#endif
}
 6d4:	cf 91       	pop	r28
 6d6:	df 91       	pop	r29
 6d8:	08 95       	ret

000006da <TMU_vidCreateTask>:


void TMU_vidCreateTask(void(*Copy_pFunAppFun)(void*) , void * Copy_pvidParameter, u16 Copy_u16Periodicity , u8 Copy_u8Priority , u8 Copy_u8Offset)
{
 6da:	0f 93       	push	r16
 6dc:	df 93       	push	r29
 6de:	cf 93       	push	r28
 6e0:	cd b7       	in	r28, 0x3d	; 61
 6e2:	de b7       	in	r29, 0x3e	; 62
 6e4:	28 97       	sbiw	r28, 0x08	; 8
 6e6:	0f b6       	in	r0, 0x3f	; 63
 6e8:	f8 94       	cli
 6ea:	de bf       	out	0x3e, r29	; 62
 6ec:	0f be       	out	0x3f, r0	; 63
 6ee:	cd bf       	out	0x3d, r28	; 61
 6f0:	9a 83       	std	Y+2, r25	; 0x02
 6f2:	89 83       	std	Y+1, r24	; 0x01
 6f4:	7c 83       	std	Y+4, r23	; 0x04
 6f6:	6b 83       	std	Y+3, r22	; 0x03
 6f8:	5e 83       	std	Y+6, r21	; 0x06
 6fa:	4d 83       	std	Y+5, r20	; 0x05
 6fc:	2f 83       	std	Y+7, r18	; 0x07
 6fe:	08 87       	std	Y+8, r16	; 0x08
	if (Copy_pFunAppFun != NULL && Copy_u8Priority < MAX_TASKS)
 700:	89 81       	ldd	r24, Y+1	; 0x01
 702:	9a 81       	ldd	r25, Y+2	; 0x02
 704:	00 97       	sbiw	r24, 0x00	; 0
 706:	09 f4       	brne	.+2      	; 0x70a <TMU_vidCreateTask+0x30>
 708:	52 c0       	rjmp	.+164    	; 0x7ae <TMU_vidCreateTask+0xd4>
 70a:	8f 81       	ldd	r24, Y+7	; 0x07
 70c:	83 30       	cpi	r24, 0x03	; 3
 70e:	08 f0       	brcs	.+2      	; 0x712 <TMU_vidCreateTask+0x38>
 710:	4e c0       	rjmp	.+156    	; 0x7ae <TMU_vidCreateTask+0xd4>
	{
		All_Tasks[ Copy_u8Priority ].pFun = Copy_pFunAppFun;
 712:	8f 81       	ldd	r24, Y+7	; 0x07
 714:	88 2f       	mov	r24, r24
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	88 0f       	add	r24, r24
 71a:	99 1f       	adc	r25, r25
 71c:	88 0f       	add	r24, r24
 71e:	99 1f       	adc	r25, r25
 720:	88 0f       	add	r24, r24
 722:	99 1f       	adc	r25, r25
 724:	fc 01       	movw	r30, r24
 726:	ed 59       	subi	r30, 0x9D	; 157
 728:	ff 4f       	sbci	r31, 0xFF	; 255
 72a:	89 81       	ldd	r24, Y+1	; 0x01
 72c:	9a 81       	ldd	r25, Y+2	; 0x02
 72e:	91 83       	std	Z+1, r25	; 0x01
 730:	80 83       	st	Z, r24
		All_Tasks[ Copy_u8Priority ].Periodicity = Copy_u16Periodicity;
 732:	8f 81       	ldd	r24, Y+7	; 0x07
 734:	88 2f       	mov	r24, r24
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	88 0f       	add	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	01 96       	adiw	r24, 0x01	; 1
 73e:	88 0f       	add	r24, r24
 740:	99 1f       	adc	r25, r25
 742:	88 0f       	add	r24, r24
 744:	99 1f       	adc	r25, r25
 746:	fc 01       	movw	r30, r24
 748:	ed 59       	subi	r30, 0x9D	; 157
 74a:	ff 4f       	sbci	r31, 0xFF	; 255
 74c:	8d 81       	ldd	r24, Y+5	; 0x05
 74e:	9e 81       	ldd	r25, Y+6	; 0x06
 750:	91 83       	std	Z+1, r25	; 0x01
 752:	80 83       	st	Z, r24
		All_Tasks[ Copy_u8Priority ].parameter = Copy_pvidParameter;
 754:	8f 81       	ldd	r24, Y+7	; 0x07
 756:	88 2f       	mov	r24, r24
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	88 0f       	add	r24, r24
 75c:	99 1f       	adc	r25, r25
 75e:	88 0f       	add	r24, r24
 760:	99 1f       	adc	r25, r25
 762:	01 96       	adiw	r24, 0x01	; 1
 764:	88 0f       	add	r24, r24
 766:	99 1f       	adc	r25, r25
 768:	fc 01       	movw	r30, r24
 76a:	ed 59       	subi	r30, 0x9D	; 157
 76c:	ff 4f       	sbci	r31, 0xFF	; 255
 76e:	8b 81       	ldd	r24, Y+3	; 0x03
 770:	9c 81       	ldd	r25, Y+4	; 0x04
 772:	91 83       	std	Z+1, r25	; 0x01
 774:	80 83       	st	Z, r24
		All_Tasks[ Copy_u8Priority ].state = READY;
 776:	8f 81       	ldd	r24, Y+7	; 0x07
 778:	88 2f       	mov	r24, r24
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	88 0f       	add	r24, r24
 77e:	99 1f       	adc	r25, r25
 780:	88 0f       	add	r24, r24
 782:	99 1f       	adc	r25, r25
 784:	88 0f       	add	r24, r24
 786:	99 1f       	adc	r25, r25
 788:	fc 01       	movw	r30, r24
 78a:	e7 59       	subi	r30, 0x97	; 151
 78c:	ff 4f       	sbci	r31, 0xFF	; 255
 78e:	87 e1       	ldi	r24, 0x17	; 23
 790:	80 83       	st	Z, r24
		All_Tasks[ Copy_u8Priority ].offset = Copy_u8Offset;
 792:	8f 81       	ldd	r24, Y+7	; 0x07
 794:	88 2f       	mov	r24, r24
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	88 0f       	add	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	88 0f       	add	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	88 0f       	add	r24, r24
 7a2:	99 1f       	adc	r25, r25
 7a4:	fc 01       	movw	r30, r24
 7a6:	e6 59       	subi	r30, 0x96	; 150
 7a8:	ff 4f       	sbci	r31, 0xFF	; 255
 7aa:	88 85       	ldd	r24, Y+8	; 0x08
 7ac:	80 83       	st	Z, r24
	}
}
 7ae:	28 96       	adiw	r28, 0x08	; 8
 7b0:	0f b6       	in	r0, 0x3f	; 63
 7b2:	f8 94       	cli
 7b4:	de bf       	out	0x3e, r29	; 62
 7b6:	0f be       	out	0x3f, r0	; 63
 7b8:	cd bf       	out	0x3d, r28	; 61
 7ba:	cf 91       	pop	r28
 7bc:	df 91       	pop	r29
 7be:	0f 91       	pop	r16
 7c0:	08 95       	ret

000007c2 <TMU_vidStartScheduler>:

void TMU_vidStartScheduler(void)
{
 7c2:	ef 92       	push	r14
 7c4:	ff 92       	push	r15
 7c6:	0f 93       	push	r16
 7c8:	1f 93       	push	r17
 7ca:	df 93       	push	r29
 7cc:	cf 93       	push	r28
 7ce:	00 d0       	rcall	.+0      	; 0x7d0 <TMU_vidStartScheduler+0xe>
 7d0:	00 d0       	rcall	.+0      	; 0x7d2 <TMU_vidStartScheduler+0x10>
 7d2:	0f 92       	push	r0
 7d4:	cd b7       	in	r28, 0x3d	; 61
 7d6:	de b7       	in	r29, 0x3e	; 62
	u32 Temp = 0;
 7d8:	1a 82       	std	Y+2, r1	; 0x02
 7da:	1b 82       	std	Y+3, r1	; 0x03
 7dc:	1c 82       	std	Y+4, r1	; 0x04
 7de:	1d 82       	std	Y+5, r1	; 0x05
	asm ("SEI");
 7e0:	78 94       	sei
	while(1)
	{
		if (TMU_u32OsTicks > Temp)
 7e2:	20 91 7b 00 	lds	r18, 0x007B
 7e6:	30 91 7c 00 	lds	r19, 0x007C
 7ea:	40 91 7d 00 	lds	r20, 0x007D
 7ee:	50 91 7e 00 	lds	r21, 0x007E
 7f2:	8a 81       	ldd	r24, Y+2	; 0x02
 7f4:	9b 81       	ldd	r25, Y+3	; 0x03
 7f6:	ac 81       	ldd	r26, Y+4	; 0x04
 7f8:	bd 81       	ldd	r27, Y+5	; 0x05
 7fa:	82 17       	cp	r24, r18
 7fc:	93 07       	cpc	r25, r19
 7fe:	a4 07       	cpc	r26, r20
 800:	b5 07       	cpc	r27, r21
 802:	78 f7       	brcc	.-34     	; 0x7e2 <TMU_vidStartScheduler+0x20>
		{
			Temp = TMU_u32OsTicks;
 804:	80 91 7b 00 	lds	r24, 0x007B
 808:	90 91 7c 00 	lds	r25, 0x007C
 80c:	a0 91 7d 00 	lds	r26, 0x007D
 810:	b0 91 7e 00 	lds	r27, 0x007E
 814:	8a 83       	std	Y+2, r24	; 0x02
 816:	9b 83       	std	Y+3, r25	; 0x03
 818:	ac 83       	std	Y+4, r26	; 0x04
 81a:	bd 83       	std	Y+5, r27	; 0x05
			//for (u8 i= 0 ; i<MAX_TASKS ; i++)
			for(s8 i = MAX_TASKS-1 ; i>=0 ; i--)
 81c:	82 e0       	ldi	r24, 0x02	; 2
 81e:	89 83       	std	Y+1, r24	; 0x01
 820:	81 c0       	rjmp	.+258    	; 0x924 <__stack+0xc5>
			{
				if (All_Tasks[i] . pFun != NULL &&
 822:	89 81       	ldd	r24, Y+1	; 0x01
 824:	99 27       	eor	r25, r25
 826:	87 fd       	sbrc	r24, 7
 828:	90 95       	com	r25
 82a:	88 0f       	add	r24, r24
 82c:	99 1f       	adc	r25, r25
 82e:	88 0f       	add	r24, r24
 830:	99 1f       	adc	r25, r25
 832:	88 0f       	add	r24, r24
 834:	99 1f       	adc	r25, r25
 836:	fc 01       	movw	r30, r24
 838:	ed 59       	subi	r30, 0x9D	; 157
 83a:	ff 4f       	sbci	r31, 0xFF	; 255
 83c:	80 81       	ld	r24, Z
 83e:	91 81       	ldd	r25, Z+1	; 0x01
 840:	00 97       	sbiw	r24, 0x00	; 0
 842:	09 f4       	brne	.+2      	; 0x846 <TMU_vidStartScheduler+0x84>
 844:	6c c0       	rjmp	.+216    	; 0x91e <__stack+0xbf>
 846:	89 81       	ldd	r24, Y+1	; 0x01
 848:	99 27       	eor	r25, r25
 84a:	87 fd       	sbrc	r24, 7
 84c:	90 95       	com	r25
 84e:	88 0f       	add	r24, r24
 850:	99 1f       	adc	r25, r25
 852:	88 0f       	add	r24, r24
 854:	99 1f       	adc	r25, r25
 856:	88 0f       	add	r24, r24
 858:	99 1f       	adc	r25, r25
 85a:	fc 01       	movw	r30, r24
 85c:	e7 59       	subi	r30, 0x97	; 151
 85e:	ff 4f       	sbci	r31, 0xFF	; 255
 860:	80 81       	ld	r24, Z
 862:	87 31       	cpi	r24, 0x17	; 23
 864:	09 f0       	breq	.+2      	; 0x868 <__stack+0x9>
 866:	5b c0       	rjmp	.+182    	; 0x91e <__stack+0xbf>
 868:	e0 90 7b 00 	lds	r14, 0x007B
 86c:	f0 90 7c 00 	lds	r15, 0x007C
 870:	00 91 7d 00 	lds	r16, 0x007D
 874:	10 91 7e 00 	lds	r17, 0x007E
 878:	89 81       	ldd	r24, Y+1	; 0x01
 87a:	99 27       	eor	r25, r25
 87c:	87 fd       	sbrc	r24, 7
 87e:	90 95       	com	r25
 880:	88 0f       	add	r24, r24
 882:	99 1f       	adc	r25, r25
 884:	01 96       	adiw	r24, 0x01	; 1
 886:	88 0f       	add	r24, r24
 888:	99 1f       	adc	r25, r25
 88a:	88 0f       	add	r24, r24
 88c:	99 1f       	adc	r25, r25
 88e:	fc 01       	movw	r30, r24
 890:	ed 59       	subi	r30, 0x9D	; 157
 892:	ff 4f       	sbci	r31, 0xFF	; 255
 894:	80 81       	ld	r24, Z
 896:	91 81       	ldd	r25, Z+1	; 0x01
 898:	9c 01       	movw	r18, r24
 89a:	40 e0       	ldi	r20, 0x00	; 0
 89c:	50 e0       	ldi	r21, 0x00	; 0
 89e:	c8 01       	movw	r24, r16
 8a0:	b7 01       	movw	r22, r14
 8a2:	0e 94 8b 06 	call	0xd16	; 0xd16 <__udivmodsi4>
 8a6:	dc 01       	movw	r26, r24
 8a8:	cb 01       	movw	r24, r22
 8aa:	9c 01       	movw	r18, r24
 8ac:	ad 01       	movw	r20, r26
 8ae:	89 81       	ldd	r24, Y+1	; 0x01
 8b0:	99 27       	eor	r25, r25
 8b2:	87 fd       	sbrc	r24, 7
 8b4:	90 95       	com	r25
 8b6:	88 0f       	add	r24, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	88 0f       	add	r24, r24
 8bc:	99 1f       	adc	r25, r25
 8be:	88 0f       	add	r24, r24
 8c0:	99 1f       	adc	r25, r25
 8c2:	fc 01       	movw	r30, r24
 8c4:	e6 59       	subi	r30, 0x96	; 150
 8c6:	ff 4f       	sbci	r31, 0xFF	; 255
 8c8:	80 81       	ld	r24, Z
 8ca:	88 2f       	mov	r24, r24
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	a0 e0       	ldi	r26, 0x00	; 0
 8d0:	b0 e0       	ldi	r27, 0x00	; 0
 8d2:	28 17       	cp	r18, r24
 8d4:	39 07       	cpc	r19, r25
 8d6:	4a 07       	cpc	r20, r26
 8d8:	5b 07       	cpc	r21, r27
 8da:	09 f5       	brne	.+66     	; 0x91e <__stack+0xbf>
						All_Tasks[i].state == READY &&
						TMU_u32OsTicks % All_Tasks[i].Periodicity == All_Tasks[i].offset)
				{
					All_Tasks[i].pFun (All_Tasks[i].parameter);
 8dc:	89 81       	ldd	r24, Y+1	; 0x01
 8de:	99 27       	eor	r25, r25
 8e0:	87 fd       	sbrc	r24, 7
 8e2:	90 95       	com	r25
 8e4:	88 0f       	add	r24, r24
 8e6:	99 1f       	adc	r25, r25
 8e8:	88 0f       	add	r24, r24
 8ea:	99 1f       	adc	r25, r25
 8ec:	88 0f       	add	r24, r24
 8ee:	99 1f       	adc	r25, r25
 8f0:	fc 01       	movw	r30, r24
 8f2:	ed 59       	subi	r30, 0x9D	; 157
 8f4:	ff 4f       	sbci	r31, 0xFF	; 255
 8f6:	20 81       	ld	r18, Z
 8f8:	31 81       	ldd	r19, Z+1	; 0x01
 8fa:	89 81       	ldd	r24, Y+1	; 0x01
 8fc:	99 27       	eor	r25, r25
 8fe:	87 fd       	sbrc	r24, 7
 900:	90 95       	com	r25
 902:	88 0f       	add	r24, r24
 904:	99 1f       	adc	r25, r25
 906:	88 0f       	add	r24, r24
 908:	99 1f       	adc	r25, r25
 90a:	01 96       	adiw	r24, 0x01	; 1
 90c:	88 0f       	add	r24, r24
 90e:	99 1f       	adc	r25, r25
 910:	fc 01       	movw	r30, r24
 912:	ed 59       	subi	r30, 0x9D	; 157
 914:	ff 4f       	sbci	r31, 0xFF	; 255
 916:	80 81       	ld	r24, Z
 918:	91 81       	ldd	r25, Z+1	; 0x01
 91a:	f9 01       	movw	r30, r18
 91c:	09 95       	icall
	{
		if (TMU_u32OsTicks > Temp)
		{
			Temp = TMU_u32OsTicks;
			//for (u8 i= 0 ; i<MAX_TASKS ; i++)
			for(s8 i = MAX_TASKS-1 ; i>=0 ; i--)
 91e:	89 81       	ldd	r24, Y+1	; 0x01
 920:	81 50       	subi	r24, 0x01	; 1
 922:	89 83       	std	Y+1, r24	; 0x01
 924:	89 81       	ldd	r24, Y+1	; 0x01
 926:	88 23       	and	r24, r24
 928:	0c f0       	brlt	.+2      	; 0x92c <__stack+0xcd>
 92a:	7b cf       	rjmp	.-266    	; 0x822 <TMU_vidStartScheduler+0x60>
 92c:	5a cf       	rjmp	.-332    	; 0x7e2 <TMU_vidStartScheduler+0x20>

0000092e <TMU_vidDeleteTask>:
	}
}


void TMU_vidDeleteTask(u8 Copy_u8Priority)
{
 92e:	df 93       	push	r29
 930:	cf 93       	push	r28
 932:	0f 92       	push	r0
 934:	cd b7       	in	r28, 0x3d	; 61
 936:	de b7       	in	r29, 0x3e	; 62
 938:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Priority <MAX_TASKS)
 93a:	89 81       	ldd	r24, Y+1	; 0x01
 93c:	83 30       	cpi	r24, 0x03	; 3
 93e:	e0 f4       	brcc	.+56     	; 0x978 <TMU_vidDeleteTask+0x4a>
	{
		All_Tasks[Copy_u8Priority].pFun = NULL;
 940:	89 81       	ldd	r24, Y+1	; 0x01
 942:	88 2f       	mov	r24, r24
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	88 0f       	add	r24, r24
 948:	99 1f       	adc	r25, r25
 94a:	88 0f       	add	r24, r24
 94c:	99 1f       	adc	r25, r25
 94e:	88 0f       	add	r24, r24
 950:	99 1f       	adc	r25, r25
 952:	fc 01       	movw	r30, r24
 954:	ed 59       	subi	r30, 0x9D	; 157
 956:	ff 4f       	sbci	r31, 0xFF	; 255
 958:	11 82       	std	Z+1, r1	; 0x01
 95a:	10 82       	st	Z, r1
		All_Tasks[ Copy_u8Priority].state = KILLED;
 95c:	89 81       	ldd	r24, Y+1	; 0x01
 95e:	88 2f       	mov	r24, r24
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	88 0f       	add	r24, r24
 964:	99 1f       	adc	r25, r25
 966:	88 0f       	add	r24, r24
 968:	99 1f       	adc	r25, r25
 96a:	88 0f       	add	r24, r24
 96c:	99 1f       	adc	r25, r25
 96e:	fc 01       	movw	r30, r24
 970:	e7 59       	subi	r30, 0x97	; 151
 972:	ff 4f       	sbci	r31, 0xFF	; 255
 974:	81 e1       	ldi	r24, 0x11	; 17
 976:	80 83       	st	Z, r24
	}
}
 978:	0f 90       	pop	r0
 97a:	cf 91       	pop	r28
 97c:	df 91       	pop	r29
 97e:	08 95       	ret

00000980 <TMU_vidPauseTask>:

void TMU_vidPauseTask(u8 Copy_u8Priority)
{
 980:	df 93       	push	r29
 982:	cf 93       	push	r28
 984:	0f 92       	push	r0
 986:	cd b7       	in	r28, 0x3d	; 61
 988:	de b7       	in	r29, 0x3e	; 62
 98a:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Priority <MAX_TASKS)
 98c:	89 81       	ldd	r24, Y+1	; 0x01
 98e:	83 30       	cpi	r24, 0x03	; 3
 990:	70 f4       	brcc	.+28     	; 0x9ae <TMU_vidPauseTask+0x2e>
	{
		All_Tasks[Copy_u8Priority].state = PAUSED;
 992:	89 81       	ldd	r24, Y+1	; 0x01
 994:	88 2f       	mov	r24, r24
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	88 0f       	add	r24, r24
 99a:	99 1f       	adc	r25, r25
 99c:	88 0f       	add	r24, r24
 99e:	99 1f       	adc	r25, r25
 9a0:	88 0f       	add	r24, r24
 9a2:	99 1f       	adc	r25, r25
 9a4:	fc 01       	movw	r30, r24
 9a6:	e7 59       	subi	r30, 0x97	; 151
 9a8:	ff 4f       	sbci	r31, 0xFF	; 255
 9aa:	88 e3       	ldi	r24, 0x38	; 56
 9ac:	80 83       	st	Z, r24
	}
}
 9ae:	0f 90       	pop	r0
 9b0:	cf 91       	pop	r28
 9b2:	df 91       	pop	r29
 9b4:	08 95       	ret

000009b6 <TMU_vidResumeTask>:

void TMU_vidResumeTask(u8 Copy_u8Priority)
{
 9b6:	df 93       	push	r29
 9b8:	cf 93       	push	r28
 9ba:	0f 92       	push	r0
 9bc:	cd b7       	in	r28, 0x3d	; 61
 9be:	de b7       	in	r29, 0x3e	; 62
 9c0:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Priority <MAX_TASKS)
 9c2:	89 81       	ldd	r24, Y+1	; 0x01
 9c4:	83 30       	cpi	r24, 0x03	; 3
 9c6:	70 f4       	brcc	.+28     	; 0x9e4 <TMU_vidResumeTask+0x2e>
	{
		All_Tasks[Copy_u8Priority].state = READY;
 9c8:	89 81       	ldd	r24, Y+1	; 0x01
 9ca:	88 2f       	mov	r24, r24
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	88 0f       	add	r24, r24
 9d0:	99 1f       	adc	r25, r25
 9d2:	88 0f       	add	r24, r24
 9d4:	99 1f       	adc	r25, r25
 9d6:	88 0f       	add	r24, r24
 9d8:	99 1f       	adc	r25, r25
 9da:	fc 01       	movw	r30, r24
 9dc:	e7 59       	subi	r30, 0x97	; 151
 9de:	ff 4f       	sbci	r31, 0xFF	; 255
 9e0:	87 e1       	ldi	r24, 0x17	; 23
 9e2:	80 83       	st	Z, r24
	}
}
 9e4:	0f 90       	pop	r0
 9e6:	cf 91       	pop	r28
 9e8:	df 91       	pop	r29
 9ea:	08 95       	ret

000009ec <__vector_10>:

#if TIMER_CHANNEL == TIMER0

void __vector_10 (void)__attribute__((signal));
void __vector_10 (void)
{
 9ec:	1f 92       	push	r1
 9ee:	0f 92       	push	r0
 9f0:	0f b6       	in	r0, 0x3f	; 63
 9f2:	0f 92       	push	r0
 9f4:	11 24       	eor	r1, r1
 9f6:	8f 93       	push	r24
 9f8:	9f 93       	push	r25
 9fa:	af 93       	push	r26
 9fc:	bf 93       	push	r27
 9fe:	df 93       	push	r29
 a00:	cf 93       	push	r28
 a02:	cd b7       	in	r28, 0x3d	; 61
 a04:	de b7       	in	r29, 0x3e	; 62
	TMU_u8ISRCount--;
 a06:	80 91 61 00 	lds	r24, 0x0061
 a0a:	81 50       	subi	r24, 0x01	; 1
 a0c:	80 93 61 00 	sts	0x0061, r24
	if ( ! TMU_u8ISRCount)
 a10:	80 91 61 00 	lds	r24, 0x0061
 a14:	88 23       	and	r24, r24
 a16:	b9 f4       	brne	.+46     	; 0xa46 <__vector_10+0x5a>
	{
		TMU_u32OsTicks++;
 a18:	80 91 7b 00 	lds	r24, 0x007B
 a1c:	90 91 7c 00 	lds	r25, 0x007C
 a20:	a0 91 7d 00 	lds	r26, 0x007D
 a24:	b0 91 7e 00 	lds	r27, 0x007E
 a28:	01 96       	adiw	r24, 0x01	; 1
 a2a:	a1 1d       	adc	r26, r1
 a2c:	b1 1d       	adc	r27, r1
 a2e:	80 93 7b 00 	sts	0x007B, r24
 a32:	90 93 7c 00 	sts	0x007C, r25
 a36:	a0 93 7d 00 	sts	0x007D, r26
 a3a:	b0 93 7e 00 	sts	0x007E, r27

		TMU_u8ISRCount = TMU_u8ISRNum;
 a3e:	80 91 60 00 	lds	r24, 0x0060
 a42:	80 93 61 00 	sts	0x0061, r24
	}
}
 a46:	cf 91       	pop	r28
 a48:	df 91       	pop	r29
 a4a:	bf 91       	pop	r27
 a4c:	af 91       	pop	r26
 a4e:	9f 91       	pop	r25
 a50:	8f 91       	pop	r24
 a52:	0f 90       	pop	r0
 a54:	0f be       	out	0x3f, r0	; 63
 a56:	0f 90       	pop	r0
 a58:	1f 90       	pop	r1
 a5a:	18 95       	reti

00000a5c <__vector_11>:

void __vector_11 (void)__attribute__((signal));
void __vector_11 (void)
{
 a5c:	1f 92       	push	r1
 a5e:	0f 92       	push	r0
 a60:	0f b6       	in	r0, 0x3f	; 63
 a62:	0f 92       	push	r0
 a64:	11 24       	eor	r1, r1
 a66:	8f 93       	push	r24
 a68:	9f 93       	push	r25
 a6a:	af 93       	push	r26
 a6c:	bf 93       	push	r27
 a6e:	ef 93       	push	r30
 a70:	ff 93       	push	r31
 a72:	df 93       	push	r29
 a74:	cf 93       	push	r28
 a76:	cd b7       	in	r28, 0x3d	; 61
 a78:	de b7       	in	r29, 0x3e	; 62
	TMU_u8ISRCount--;
 a7a:	80 91 61 00 	lds	r24, 0x0061
 a7e:	81 50       	subi	r24, 0x01	; 1
 a80:	80 93 61 00 	sts	0x0061, r24
	if ( ! TMU_u8ISRCount)
 a84:	80 91 61 00 	lds	r24, 0x0061
 a88:	88 23       	and	r24, r24
 a8a:	e1 f4       	brne	.+56     	; 0xac4 <__vector_11+0x68>
	{
		TCNT0 = TMU_u8Preload;
 a8c:	e2 e5       	ldi	r30, 0x52	; 82
 a8e:	f0 e0       	ldi	r31, 0x00	; 0
 a90:	80 91 62 00 	lds	r24, 0x0062
 a94:	80 83       	st	Z, r24

		TMU_u32OsTicks++;
 a96:	80 91 7b 00 	lds	r24, 0x007B
 a9a:	90 91 7c 00 	lds	r25, 0x007C
 a9e:	a0 91 7d 00 	lds	r26, 0x007D
 aa2:	b0 91 7e 00 	lds	r27, 0x007E
 aa6:	01 96       	adiw	r24, 0x01	; 1
 aa8:	a1 1d       	adc	r26, r1
 aaa:	b1 1d       	adc	r27, r1
 aac:	80 93 7b 00 	sts	0x007B, r24
 ab0:	90 93 7c 00 	sts	0x007C, r25
 ab4:	a0 93 7d 00 	sts	0x007D, r26
 ab8:	b0 93 7e 00 	sts	0x007E, r27

		TMU_u8ISRCount = TMU_u8ISRNum;
 abc:	80 91 60 00 	lds	r24, 0x0060
 ac0:	80 93 61 00 	sts	0x0061, r24
	}
}
 ac4:	cf 91       	pop	r28
 ac6:	df 91       	pop	r29
 ac8:	ff 91       	pop	r31
 aca:	ef 91       	pop	r30
 acc:	bf 91       	pop	r27
 ace:	af 91       	pop	r26
 ad0:	9f 91       	pop	r25
 ad2:	8f 91       	pop	r24
 ad4:	0f 90       	pop	r0
 ad6:	0f be       	out	0x3f, r0	; 63
 ad8:	0f 90       	pop	r0
 ada:	1f 90       	pop	r1
 adc:	18 95       	reti

00000ade <main>:
void t2(void*p);
void t3(void*p);

int
main(void)
{
 ade:	0f 93       	push	r16
 ae0:	df 93       	push	r29
 ae2:	cf 93       	push	r28
 ae4:	00 d0       	rcall	.+0      	; 0xae6 <main+0x8>
 ae6:	0f 92       	push	r0
 ae8:	cd b7       	in	r28, 0x3d	; 61
 aea:	de b7       	in	r29, 0x3e	; 62

	u8 arr[3]={DIO_u8GROUP_D , DIO_u8PIN2};
 aec:	83 e0       	ldi	r24, 0x03	; 3
 aee:	fe 01       	movw	r30, r28
 af0:	31 96       	adiw	r30, 0x01	; 1
 af2:	df 01       	movw	r26, r30
 af4:	98 2f       	mov	r25, r24
 af6:	1d 92       	st	X+, r1
 af8:	9a 95       	dec	r25
 afa:	e9 f7       	brne	.-6      	; 0xaf6 <main+0x18>
 afc:	83 e0       	ldi	r24, 0x03	; 3
 afe:	89 83       	std	Y+1, r24	; 0x01
 b00:	82 e0       	ldi	r24, 0x02	; 2
 b02:	8a 83       	std	Y+2, r24	; 0x02

	DIO_enuSetPinDirection(DIO_u8GROUP_C , DIO_u8PIN7, DIO_u8OUTPUT);
 b04:	82 e0       	ldi	r24, 0x02	; 2
 b06:	67 e0       	ldi	r22, 0x07	; 7
 b08:	41 e0       	ldi	r20, 0x01	; 1
 b0a:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8GROUP_C , DIO_u8PIN2, DIO_u8OUTPUT);
 b0e:	82 e0       	ldi	r24, 0x02	; 2
 b10:	62 e0       	ldi	r22, 0x02	; 2
 b12:	41 e0       	ldi	r20, 0x01	; 1
 b14:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8GROUP_D , DIO_u8PIN2, DIO_u8INPUT);
 b18:	83 e0       	ldi	r24, 0x03	; 3
 b1a:	62 e0       	ldi	r22, 0x02	; 2
 b1c:	40 e0       	ldi	r20, 0x00	; 0
 b1e:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(DIO_u8GROUP_D , DIO_u8PIN2, DIO_u8FLOAT);
 b22:	83 e0       	ldi	r24, 0x03	; 3
 b24:	62 e0       	ldi	r22, 0x02	; 2
 b26:	40 e0       	ldi	r20, 0x00	; 0
 b28:	0e 94 36 01 	call	0x26c	; 0x26c <DIO_enuSetPinValue>
	TMU_vidInit();
 b2c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <TMU_vidInit>

	TMU_vidCreateTask(t1 , arr+2 , 3 , 2 , 0);
 b30:	80 e6       	ldi	r24, 0x60	; 96
 b32:	96 e0       	ldi	r25, 0x06	; 6
 b34:	9e 01       	movw	r18, r28
 b36:	2d 5f       	subi	r18, 0xFD	; 253
 b38:	3f 4f       	sbci	r19, 0xFF	; 255
 b3a:	b9 01       	movw	r22, r18
 b3c:	43 e0       	ldi	r20, 0x03	; 3
 b3e:	50 e0       	ldi	r21, 0x00	; 0
 b40:	22 e0       	ldi	r18, 0x02	; 2
 b42:	00 e0       	ldi	r16, 0x00	; 0
 b44:	0e 94 6d 03 	call	0x6da	; 0x6da <TMU_vidCreateTask>
	TMU_vidCreateTask(t2 , arr ,   2 , 1 , 0 );
 b48:	8b eb       	ldi	r24, 0xBB	; 187
 b4a:	95 e0       	ldi	r25, 0x05	; 5
 b4c:	9e 01       	movw	r18, r28
 b4e:	2f 5f       	subi	r18, 0xFF	; 255
 b50:	3f 4f       	sbci	r19, 0xFF	; 255
 b52:	b9 01       	movw	r22, r18
 b54:	42 e0       	ldi	r20, 0x02	; 2
 b56:	50 e0       	ldi	r21, 0x00	; 0
 b58:	21 e0       	ldi	r18, 0x01	; 1
 b5a:	00 e0       	ldi	r16, 0x00	; 0
 b5c:	0e 94 6d 03 	call	0x6da	; 0x6da <TMU_vidCreateTask>


	TMU_vidStartScheduler();
 b60:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <TMU_vidStartScheduler>
 b64:	80 e0       	ldi	r24, 0x00	; 0
 b66:	90 e0       	ldi	r25, 0x00	; 0
}
 b68:	0f 90       	pop	r0
 b6a:	0f 90       	pop	r0
 b6c:	0f 90       	pop	r0
 b6e:	cf 91       	pop	r28
 b70:	df 91       	pop	r29
 b72:	0f 91       	pop	r16
 b74:	08 95       	ret

00000b76 <t2>:
void t2(void*p)
{
 b76:	df 93       	push	r29
 b78:	cf 93       	push	r28
 b7a:	00 d0       	rcall	.+0      	; 0xb7c <t2+0x6>
 b7c:	00 d0       	rcall	.+0      	; 0xb7e <t2+0x8>
 b7e:	0f 92       	push	r0
 b80:	cd b7       	in	r28, 0x3d	; 61
 b82:	de b7       	in	r29, 0x3e	; 62
 b84:	9d 83       	std	Y+5, r25	; 0x05
 b86:	8c 83       	std	Y+4, r24	; 0x04
	u8 * ptr = (u8*)p;
 b88:	8c 81       	ldd	r24, Y+4	; 0x04
 b8a:	9d 81       	ldd	r25, Y+5	; 0x05
 b8c:	9a 83       	std	Y+2, r25	; 0x02
 b8e:	89 83       	std	Y+1, r24	; 0x01
	u8 value;

	DIO_enuGetPinValue(ptr[0] , ptr[1] , &value);
 b90:	e9 81       	ldd	r30, Y+1	; 0x01
 b92:	fa 81       	ldd	r31, Y+2	; 0x02
 b94:	40 81       	ld	r20, Z
 b96:	89 81       	ldd	r24, Y+1	; 0x01
 b98:	9a 81       	ldd	r25, Y+2	; 0x02
 b9a:	fc 01       	movw	r30, r24
 b9c:	31 96       	adiw	r30, 0x01	; 1
 b9e:	90 81       	ld	r25, Z
 ba0:	9e 01       	movw	r18, r28
 ba2:	2d 5f       	subi	r18, 0xFD	; 253
 ba4:	3f 4f       	sbci	r19, 0xFF	; 255
 ba6:	84 2f       	mov	r24, r20
 ba8:	69 2f       	mov	r22, r25
 baa:	a9 01       	movw	r20, r18
 bac:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_enuGetPinValue>
	static u8 press = 0, unpress = 0, hold = 0;
	if ( (value==1) && press == 0 && unpress == 0 && hold == 0 )  //First press
 bb0:	8b 81       	ldd	r24, Y+3	; 0x03
 bb2:	81 30       	cpi	r24, 0x01	; 1
 bb4:	b1 f4       	brne	.+44     	; 0xbe2 <t2+0x6c>
 bb6:	80 91 81 00 	lds	r24, 0x0081
 bba:	88 23       	and	r24, r24
 bbc:	91 f4       	brne	.+36     	; 0xbe2 <t2+0x6c>
 bbe:	80 91 80 00 	lds	r24, 0x0080
 bc2:	88 23       	and	r24, r24
 bc4:	71 f4       	brne	.+28     	; 0xbe2 <t2+0x6c>
 bc6:	80 91 7f 00 	lds	r24, 0x007F
 bca:	88 23       	and	r24, r24
 bcc:	51 f4       	brne	.+20     	; 0xbe2 <t2+0x6c>
	{
		press = 1;
 bce:	81 e0       	ldi	r24, 0x01	; 1
 bd0:	80 93 81 00 	sts	0x0081, r24
		*(ptr+2) = DIO_u8HIGH;
 bd4:	89 81       	ldd	r24, Y+1	; 0x01
 bd6:	9a 81       	ldd	r25, Y+2	; 0x02
 bd8:	fc 01       	movw	r30, r24
 bda:	32 96       	adiw	r30, 0x02	; 2
 bdc:	81 e0       	ldi	r24, 0x01	; 1
 bde:	80 83       	st	Z, r24
 be0:	67 c0       	rjmp	.+206    	; 0xcb0 <t2+0x13a>
	}
	else if ( (value==1) && press == 1 && unpress == 0 && hold == 0 ) //continued first press
 be2:	8b 81       	ldd	r24, Y+3	; 0x03
 be4:	81 30       	cpi	r24, 0x01	; 1
 be6:	81 f4       	brne	.+32     	; 0xc08 <t2+0x92>
 be8:	80 91 81 00 	lds	r24, 0x0081
 bec:	81 30       	cpi	r24, 0x01	; 1
 bee:	61 f4       	brne	.+24     	; 0xc08 <t2+0x92>
 bf0:	80 91 80 00 	lds	r24, 0x0080
 bf4:	88 23       	and	r24, r24
 bf6:	41 f4       	brne	.+16     	; 0xc08 <t2+0x92>
 bf8:	80 91 7f 00 	lds	r24, 0x007F
 bfc:	88 23       	and	r24, r24
 bfe:	21 f4       	brne	.+8      	; 0xc08 <t2+0x92>
	{
		hold = 1;
 c00:	81 e0       	ldi	r24, 0x01	; 1
 c02:	80 93 7f 00 	sts	0x007F, r24
 c06:	54 c0       	rjmp	.+168    	; 0xcb0 <t2+0x13a>
	}
	else if ( (value== 0) && press == 1 && unpress == 0 && hold == 1 ) // removed first press
 c08:	8b 81       	ldd	r24, Y+3	; 0x03
 c0a:	88 23       	and	r24, r24
 c0c:	91 f4       	brne	.+36     	; 0xc32 <t2+0xbc>
 c0e:	80 91 81 00 	lds	r24, 0x0081
 c12:	81 30       	cpi	r24, 0x01	; 1
 c14:	71 f4       	brne	.+28     	; 0xc32 <t2+0xbc>
 c16:	80 91 80 00 	lds	r24, 0x0080
 c1a:	88 23       	and	r24, r24
 c1c:	51 f4       	brne	.+20     	; 0xc32 <t2+0xbc>
 c1e:	80 91 7f 00 	lds	r24, 0x007F
 c22:	81 30       	cpi	r24, 0x01	; 1
 c24:	31 f4       	brne	.+12     	; 0xc32 <t2+0xbc>
	{
		unpress = 1;
 c26:	81 e0       	ldi	r24, 0x01	; 1
 c28:	80 93 80 00 	sts	0x0080, r24
		hold = 0;
 c2c:	10 92 7f 00 	sts	0x007F, r1
 c30:	3f c0       	rjmp	.+126    	; 0xcb0 <t2+0x13a>
	}
	else if ( (value==1) && press == 1 && unpress == 1 && hold == 0 ) //second press
 c32:	8b 81       	ldd	r24, Y+3	; 0x03
 c34:	81 30       	cpi	r24, 0x01	; 1
 c36:	a1 f4       	brne	.+40     	; 0xc60 <t2+0xea>
 c38:	80 91 81 00 	lds	r24, 0x0081
 c3c:	81 30       	cpi	r24, 0x01	; 1
 c3e:	81 f4       	brne	.+32     	; 0xc60 <t2+0xea>
 c40:	80 91 80 00 	lds	r24, 0x0080
 c44:	81 30       	cpi	r24, 0x01	; 1
 c46:	61 f4       	brne	.+24     	; 0xc60 <t2+0xea>
 c48:	80 91 7f 00 	lds	r24, 0x007F
 c4c:	88 23       	and	r24, r24
 c4e:	41 f4       	brne	.+16     	; 0xc60 <t2+0xea>
	{
		press = 0;
 c50:	10 92 81 00 	sts	0x0081, r1
		*(ptr+2) = DIO_u8LOW;
 c54:	89 81       	ldd	r24, Y+1	; 0x01
 c56:	9a 81       	ldd	r25, Y+2	; 0x02
 c58:	fc 01       	movw	r30, r24
 c5a:	32 96       	adiw	r30, 0x02	; 2
 c5c:	10 82       	st	Z, r1
 c5e:	28 c0       	rjmp	.+80     	; 0xcb0 <t2+0x13a>
	}
	else if ( (value==1) && press == 0 && unpress == 1 && hold == 0) //continued second press
 c60:	8b 81       	ldd	r24, Y+3	; 0x03
 c62:	81 30       	cpi	r24, 0x01	; 1
 c64:	81 f4       	brne	.+32     	; 0xc86 <t2+0x110>
 c66:	80 91 81 00 	lds	r24, 0x0081
 c6a:	88 23       	and	r24, r24
 c6c:	61 f4       	brne	.+24     	; 0xc86 <t2+0x110>
 c6e:	80 91 80 00 	lds	r24, 0x0080
 c72:	81 30       	cpi	r24, 0x01	; 1
 c74:	41 f4       	brne	.+16     	; 0xc86 <t2+0x110>
 c76:	80 91 7f 00 	lds	r24, 0x007F
 c7a:	88 23       	and	r24, r24
 c7c:	21 f4       	brne	.+8      	; 0xc86 <t2+0x110>
	{
		hold = 1;
 c7e:	81 e0       	ldi	r24, 0x01	; 1
 c80:	80 93 7f 00 	sts	0x007F, r24
 c84:	15 c0       	rjmp	.+42     	; 0xcb0 <t2+0x13a>
	}
	else if ( (value==0) && press == 0 && unpress == 1 && hold == 1) // removed second press
 c86:	8b 81       	ldd	r24, Y+3	; 0x03
 c88:	88 23       	and	r24, r24
 c8a:	91 f4       	brne	.+36     	; 0xcb0 <t2+0x13a>
 c8c:	80 91 81 00 	lds	r24, 0x0081
 c90:	88 23       	and	r24, r24
 c92:	71 f4       	brne	.+28     	; 0xcb0 <t2+0x13a>
 c94:	80 91 80 00 	lds	r24, 0x0080
 c98:	81 30       	cpi	r24, 0x01	; 1
 c9a:	51 f4       	brne	.+20     	; 0xcb0 <t2+0x13a>
 c9c:	80 91 7f 00 	lds	r24, 0x007F
 ca0:	81 30       	cpi	r24, 0x01	; 1
 ca2:	31 f4       	brne	.+12     	; 0xcb0 <t2+0x13a>
	{
		hold = 0;
 ca4:	10 92 7f 00 	sts	0x007F, r1
		press = 0;
 ca8:	10 92 81 00 	sts	0x0081, r1
		unpress = 0;
 cac:	10 92 80 00 	sts	0x0080, r1
	}
}
 cb0:	0f 90       	pop	r0
 cb2:	0f 90       	pop	r0
 cb4:	0f 90       	pop	r0
 cb6:	0f 90       	pop	r0
 cb8:	0f 90       	pop	r0
 cba:	cf 91       	pop	r28
 cbc:	df 91       	pop	r29
 cbe:	08 95       	ret

00000cc0 <t1>:
void t1(void*p)
{
 cc0:	df 93       	push	r29
 cc2:	cf 93       	push	r28
 cc4:	00 d0       	rcall	.+0      	; 0xcc6 <t1+0x6>
 cc6:	00 d0       	rcall	.+0      	; 0xcc8 <t1+0x8>
 cc8:	cd b7       	in	r28, 0x3d	; 61
 cca:	de b7       	in	r29, 0x3e	; 62
 ccc:	9c 83       	std	Y+4, r25	; 0x04
 cce:	8b 83       	std	Y+3, r24	; 0x03
	u8 * ptr = (u8*)p;
 cd0:	8b 81       	ldd	r24, Y+3	; 0x03
 cd2:	9c 81       	ldd	r25, Y+4	; 0x04
 cd4:	9a 83       	std	Y+2, r25	; 0x02
 cd6:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPinValue(DIO_u8GROUP_C , DIO_u8PIN2 , *ptr);
 cd8:	e9 81       	ldd	r30, Y+1	; 0x01
 cda:	fa 81       	ldd	r31, Y+2	; 0x02
 cdc:	90 81       	ld	r25, Z
 cde:	82 e0       	ldi	r24, 0x02	; 2
 ce0:	62 e0       	ldi	r22, 0x02	; 2
 ce2:	49 2f       	mov	r20, r25
 ce4:	0e 94 36 01 	call	0x26c	; 0x26c <DIO_enuSetPinValue>
}
 ce8:	0f 90       	pop	r0
 cea:	0f 90       	pop	r0
 cec:	0f 90       	pop	r0
 cee:	0f 90       	pop	r0
 cf0:	cf 91       	pop	r28
 cf2:	df 91       	pop	r29
 cf4:	08 95       	ret

00000cf6 <t3>:
void t3(void*p)
{
 cf6:	df 93       	push	r29
 cf8:	cf 93       	push	r28
 cfa:	00 d0       	rcall	.+0      	; 0xcfc <t3+0x6>
 cfc:	cd b7       	in	r28, 0x3d	; 61
 cfe:	de b7       	in	r29, 0x3e	; 62
 d00:	9a 83       	std	Y+2, r25	; 0x02
 d02:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuTogglePinValue(DIO_u8GROUP_D , DIO_u8PIN3);
 d04:	83 e0       	ldi	r24, 0x03	; 3
 d06:	63 e0       	ldi	r22, 0x03	; 3
 d08:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_enuTogglePinValue>
}
 d0c:	0f 90       	pop	r0
 d0e:	0f 90       	pop	r0
 d10:	cf 91       	pop	r28
 d12:	df 91       	pop	r29
 d14:	08 95       	ret

00000d16 <__udivmodsi4>:
 d16:	a1 e2       	ldi	r26, 0x21	; 33
 d18:	1a 2e       	mov	r1, r26
 d1a:	aa 1b       	sub	r26, r26
 d1c:	bb 1b       	sub	r27, r27
 d1e:	fd 01       	movw	r30, r26
 d20:	0d c0       	rjmp	.+26     	; 0xd3c <__udivmodsi4_ep>

00000d22 <__udivmodsi4_loop>:
 d22:	aa 1f       	adc	r26, r26
 d24:	bb 1f       	adc	r27, r27
 d26:	ee 1f       	adc	r30, r30
 d28:	ff 1f       	adc	r31, r31
 d2a:	a2 17       	cp	r26, r18
 d2c:	b3 07       	cpc	r27, r19
 d2e:	e4 07       	cpc	r30, r20
 d30:	f5 07       	cpc	r31, r21
 d32:	20 f0       	brcs	.+8      	; 0xd3c <__udivmodsi4_ep>
 d34:	a2 1b       	sub	r26, r18
 d36:	b3 0b       	sbc	r27, r19
 d38:	e4 0b       	sbc	r30, r20
 d3a:	f5 0b       	sbc	r31, r21

00000d3c <__udivmodsi4_ep>:
 d3c:	66 1f       	adc	r22, r22
 d3e:	77 1f       	adc	r23, r23
 d40:	88 1f       	adc	r24, r24
 d42:	99 1f       	adc	r25, r25
 d44:	1a 94       	dec	r1
 d46:	69 f7       	brne	.-38     	; 0xd22 <__udivmodsi4_loop>
 d48:	60 95       	com	r22
 d4a:	70 95       	com	r23
 d4c:	80 95       	com	r24
 d4e:	90 95       	com	r25
 d50:	9b 01       	movw	r18, r22
 d52:	ac 01       	movw	r20, r24
 d54:	bd 01       	movw	r22, r26
 d56:	cf 01       	movw	r24, r30
 d58:	08 95       	ret

00000d5a <_exit>:
 d5a:	f8 94       	cli

00000d5c <__stop_program>:
 d5c:	ff cf       	rjmp	.-2      	; 0xd5c <__stop_program>
